// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication5.Models;

namespace WebApplication5.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication5.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(60);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("StateProvinceId")
                        .HasColumnName("StateProvinceID");

                    b.HasKey("AddressId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Address_rowguid");

                    b.HasIndex("StateProvinceId");

                    b.HasIndex("AddressLine1", "AddressLine2", "City", "StateProvinceId", "PostalCode")
                        .IsUnique()
                        .HasFilter("[AddressLine2] IS NOT NULL");

                    b.ToTable("Address","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("AddressTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_AddressType_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_AddressType_rowguid");

                    b.ToTable("AddressType","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebApplication5.Models.AwbuildVersion", b =>
                {
                    b.Property<byte>("SystemInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SystemInformationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatabaseVersion")
                        .IsRequired()
                        .HasColumnName("Database Version")
                        .HasMaxLength(25);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("datetime");

                    b.HasKey("SystemInformationId")
                        .HasName("PK_AWBuildVersion_SystemInformationID");

                    b.ToTable("AWBuildVersion");
                });

            modelBuilder.Entity("WebApplication5.Models.BillOfMaterials", b =>
                {
                    b.Property<int>("BillOfMaterialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BillOfMaterialsID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Bomlevel")
                        .HasColumnName("BOMLevel");

                    b.Property<int>("ComponentId")
                        .HasColumnName("ComponentID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PerAssemblyQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8, 2)")
                        .HasDefaultValueSql("((1.00))");

                    b.Property<int?>("ProductAssemblyId")
                        .HasColumnName("ProductAssemblyID");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UnitMeasureCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.HasKey("BillOfMaterialsId")
                        .HasName("PK_BillOfMaterials_BillOfMaterialsID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ComponentId");

                    b.HasIndex("UnitMeasureCode");

                    b.HasIndex("ProductAssemblyId", "ComponentId", "StartDate")
                        .IsUnique()
                        .HasName("AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("BillOfMaterials","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.BusinessEntity", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BusinessEntityID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_BusinessEntity_rowguid");

                    b.ToTable("BusinessEntity","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.BusinessEntityAddress", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("AddressId")
                        .HasColumnName("AddressID");

                    b.Property<int>("AddressTypeId")
                        .HasColumnName("AddressTypeID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId", "AddressId", "AddressTypeId")
                        .HasName("PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_BusinessEntityAddress_rowguid");

                    b.ToTable("BusinessEntityAddress","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.BusinessEntityContact", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonID");

                    b.Property<int>("ContactTypeId")
                        .HasColumnName("ContactTypeID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId", "PersonId", "ContactTypeId")
                        .HasName("PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_BusinessEntityContact_rowguid");

                    b.ToTable("BusinessEntityContact","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.ContactType", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContactTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ContactTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ContactType_Name");

                    b.ToTable("ContactType","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.CountryRegion", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasMaxLength(3);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CountryRegionCode")
                        .HasName("PK_CountryRegion_CountryRegionCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_CountryRegion_Name");

                    b.ToTable("CountryRegion","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.CountryRegionCurrency", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasMaxLength(3);

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CountryRegionCode", "CurrencyCode")
                        .HasName("PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("CountryRegionCurrency","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.CreditCard", b =>
                {
                    b.Property<int>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreditCardID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("ExpMonth");

                    b.Property<short>("ExpYear");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CreditCardId");

                    b.HasIndex("CardNumber")
                        .IsUnique()
                        .HasName("AK_CreditCard_CardNumber");

                    b.ToTable("CreditCard","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.Culture", b =>
                {
                    b.Property<string>("CultureId")
                        .HasColumnName("CultureID")
                        .HasMaxLength(6);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CultureId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Culture_Name");

                    b.ToTable("Culture","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CurrencyCode")
                        .HasName("PK_Currency_CurrencyCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Currency_Name");

                    b.ToTable("Currency","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.CurrencyRate", b =>
                {
                    b.Property<int>("CurrencyRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CurrencyRateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AverageRate")
                        .HasColumnType("money");

                    b.Property<DateTime>("CurrencyRateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("EndOfDayRate")
                        .HasColumnType("money");

                    b.Property<string>("FromCurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ToCurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.HasKey("CurrencyRateId");

                    b.HasIndex("FromCurrencyCode");

                    b.HasIndex("ToCurrencyCode");

                    b.HasIndex("CurrencyRateDate", "FromCurrencyCode", "ToCurrencyCode")
                        .IsUnique()
                        .HasName("AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode");

                    b.ToTable("CurrencyRate","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull('AW'+[dbo].[ufnLeadingZeros]([CustomerID]),''))")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PersonId")
                        .HasColumnName("PersonID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreID");

                    b.Property<int?>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasName("AK_Customer_AccountNumber");

                    b.HasIndex("PersonId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Customer_rowguid");

                    b.HasIndex("StoreId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Customer","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.DatabaseLog", b =>
                {
                    b.Property<int>("DatabaseLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DatabaseLogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatabaseUser")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Object")
                        .HasMaxLength(128);

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Schema")
                        .HasMaxLength(128);

                    b.Property<string>("Tsql")
                        .IsRequired()
                        .HasColumnName("TSQL");

                    b.Property<string>("XmlEvent")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.HasKey("DatabaseLogId")
                        .HasName("PK_DatabaseLog_DatabaseLogID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("DatabaseLog");
                });

            modelBuilder.Entity("WebApplication5.Models.DemoSalesOrderDetailSeed", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocalID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID");

                    b.Property<short>("OrderQty");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("SpecialOfferId")
                        .HasColumnName("SpecialOfferID");

                    b.HasKey("LocalId")
                        .HasName("PK__DemoSale__499359DA37DC4424")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrderId")
                        .HasName("IX_OrderID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("DemoSalesOrderDetailSeed","Demo");

                    b.HasAnnotation("SqlServer:MemoryOptimized", true);
                });

            modelBuilder.Entity("WebApplication5.Models.DemoSalesOrderHeaderSeed", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocalID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillToAddressId")
                        .HasColumnName("BillToAddressID");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DueDate");

                    b.Property<int>("SalesPersonId")
                        .HasColumnName("SalesPersonID");

                    b.Property<int>("ShipMethodId")
                        .HasColumnName("ShipMethodID");

                    b.Property<int>("ShipToAddressId")
                        .HasColumnName("ShipToAddressID");

                    b.HasKey("LocalId")
                        .HasName("PK__DemoSale__499359DA31897820")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("DemoSalesOrderHeaderSeed","Demo");

                    b.HasAnnotation("SqlServer:MemoryOptimized", true);
                });

            modelBuilder.Entity("WebApplication5.Models.Department", b =>
                {
                    b.Property<short>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Department_Name");

                    b.ToTable("Department","HumanResources");
                });

            modelBuilder.Entity("WebApplication5.Models.DeviceCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired();

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("WebApplication5.Models.EmailAddress", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("EmailAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmailAddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress1")
                        .HasColumnName("EmailAddress")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId", "EmailAddressId")
                        .HasName("PK_EmailAddress_BusinessEntityID_EmailAddressID");

                    b.HasIndex("EmailAddress1");

                    b.ToTable("EmailAddress","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.Employee", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<bool?>("CurrentFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasColumnName("LoginID")
                        .HasMaxLength(256);

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NationalIdnumber")
                        .IsRequired()
                        .HasColumnName("NationalIDNumber")
                        .HasMaxLength(15);

                    b.Property<short?>("OrganizationLevel")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("([OrganizationNode].[GetLevel]())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("SalariedFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("SickLeaveHours");

                    b.Property<short>("VacationHours");

                    b.HasKey("BusinessEntityId")
                        .HasName("PK_Employee_BusinessEntityID");

                    b.HasIndex("LoginId")
                        .IsUnique()
                        .HasName("AK_Employee_LoginID");

                    b.HasIndex("NationalIdnumber")
                        .IsUnique()
                        .HasName("AK_Employee_NationalIDNumber");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Employee_rowguid");

                    b.ToTable("Employee","HumanResources");
                });

            modelBuilder.Entity("WebApplication5.Models.EmployeeDepartmentHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<short>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.Property<byte>("ShiftId")
                        .HasColumnName("ShiftID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BusinessEntityId", "StartDate", "DepartmentId", "ShiftId")
                        .HasName("PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_DepartmentID");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ShiftId");

                    b.ToTable("EmployeeDepartmentHistory","HumanResources");
                });

            modelBuilder.Entity("WebApplication5.Models.EmployeePayHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("RateChangeDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("PayFrequency");

                    b.Property<decimal>("Rate")
                        .HasColumnType("money");

                    b.HasKey("BusinessEntityId", "RateChangeDate")
                        .HasName("PK_EmployeePayHistory_BusinessEntityID_RateChangeDate");

                    b.ToTable("EmployeePayHistory","HumanResources");
                });

            modelBuilder.Entity("WebApplication5.Models.EmployeeTemporal", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasColumnName("LoginID")
                        .HasMaxLength(256);

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("NationalIdnumber")
                        .IsRequired()
                        .HasColumnName("NationalIDNumber")
                        .HasMaxLength(15);

                    b.Property<short?>("OrganizationLevel")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("([OrganizationNode].[GetLevel]())");

                    b.Property<short>("SickLeaveHours");

                    b.Property<short>("VacationHours");

                    b.HasKey("BusinessEntityId")
                        .HasName("PK_Employee_History_BusinessEntityID");

                    b.ToTable("Employee_Temporal","HumanResources");
                });

            modelBuilder.Entity("WebApplication5.Models.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ErrorLogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ErrorLine");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<int>("ErrorNumber");

                    b.Property<string>("ErrorProcedure")
                        .HasMaxLength(126);

                    b.Property<int?>("ErrorSeverity");

                    b.Property<int?>("ErrorState");

                    b.Property<DateTime>("ErrorTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("ErrorLogId");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("WebApplication5.Models.Illustration", b =>
                {
                    b.Property<int>("IllustrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IllustrationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Diagram")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IllustrationId");

                    b.ToTable("Illustration","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.JobCandidate", b =>
                {
                    b.Property<int>("JobCandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JobCandidateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Resume")
                        .HasColumnType("xml");

                    b.HasKey("JobCandidateId");

                    b.HasIndex("BusinessEntityId");

                    b.ToTable("JobCandidate","HumanResources");
                });

            modelBuilder.Entity("WebApplication5.Models.Location", b =>
                {
                    b.Property<short>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Availability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8, 2)")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("CostRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("LocationId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Location_Name");

                    b.ToTable("Location","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.OrderTracking", b =>
                {
                    b.Property<int>("OrderTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderTrackingID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarrierTrackingNumber")
                        .HasMaxLength(25);

                    b.Property<DateTime>("EventDateTime");

                    b.Property<string>("EventDetails")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("SalesOrderId")
                        .HasColumnName("SalesOrderID");

                    b.Property<int>("TrackingEventId")
                        .HasColumnName("TrackingEventID");

                    b.HasKey("OrderTrackingId");

                    b.HasIndex("CarrierTrackingNumber");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("OrderTracking","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.Password", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId")
                        .HasName("PK_Password_BusinessEntityID");

                    b.ToTable("Password","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.PersistedGrants", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired();

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("WebApplication5.Models.Person", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<string>("AdditionalContactInfo")
                        .HasColumnType("xml");

                    b.Property<string>("Demographics")
                        .HasColumnType("xml");

                    b.Property<int>("EmailPromotion");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("NameStyle");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .HasMaxLength(8);

                    b.HasKey("BusinessEntityId")
                        .HasName("PK_Person_BusinessEntityID");

                    b.HasIndex("AdditionalContactInfo")
                        .HasName("PXML_Person_AddContact");

                    b.HasIndex("Demographics")
                        .HasName("XMLVALUE_Person_Demographics");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Person_rowguid");

                    b.HasIndex("LastName", "FirstName", "MiddleName");

                    b.ToTable("Person","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.PersonCreditCard", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("CreditCardId")
                        .HasColumnName("CreditCardID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BusinessEntityId", "CreditCardId")
                        .HasName("PK_PersonCreditCard_BusinessEntityID_CreditCardID");

                    b.HasIndex("CreditCardId");

                    b.ToTable("PersonCreditCard","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.PersonJson", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PersonID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalContactInfo");

                    b.Property<string>("Demographics");

                    b.Property<string>("EmailAddresses");

                    b.Property<int>("EmailPromotion");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("NameStyle");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("PhoneNumbers");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .HasMaxLength(8);

                    b.HasKey("PersonId")
                        .HasName("PK_Person_json_PersonID");

                    b.ToTable("Person_json","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.PersonPhone", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25);

                    b.Property<int>("PhoneNumberTypeId")
                        .HasColumnName("PhoneNumberTypeID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BusinessEntityId", "PhoneNumber", "PhoneNumberTypeId")
                        .HasName("PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("PersonPhone","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.PersonTemporal", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("EmailPromotion");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<bool>("NameStyle");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .HasMaxLength(8);

                    b.HasKey("BusinessEntityId")
                        .HasName("PK_Person_Temporal_BusinessEntityID");

                    b.ToTable("Person_Temporal","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.PhoneNumberType", b =>
                {
                    b.Property<int>("PhoneNumberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PhoneNumberTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PhoneNumberTypeId");

                    b.ToTable("PhoneNumberType","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .HasMaxLength(2);

                    b.Property<string>("Color")
                        .HasMaxLength(15);

                    b.Property<int>("DaysToManufacture");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("FinishedGoodsFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<bool?>("MakeFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProductLine")
                        .HasMaxLength(2);

                    b.Property<int?>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int?>("ProductSubcategoryId")
                        .HasColumnName("ProductSubcategoryID");

                    b.Property<short>("ReorderPoint");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<short>("SafetyStockLevel");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Size")
                        .HasMaxLength(5);

                    b.Property<string>("SizeUnitMeasureCode")
                        .HasMaxLength(3);

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.Property<string>("Style")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("WeightUnitMeasureCode")
                        .HasMaxLength(3);

                    b.HasKey("ProductId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Product_Name");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductNumber")
                        .IsUnique()
                        .HasName("AK_Product_ProductNumber");

                    b.HasIndex("ProductSubcategoryId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Product_rowguid");

                    b.HasIndex("SizeUnitMeasureCode");

                    b.HasIndex("WeightUnitMeasureCode");

                    b.ToTable("Product","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductCategory_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductCategory_rowguid");

                    b.ToTable("ProductCategory","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductCostHistory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.HasKey("ProductId", "StartDate")
                        .HasName("PK_ProductCostHistory_ProductID_StartDate");

                    b.ToTable("ProductCostHistory","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductDescriptionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductDescriptionId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductDescription_rowguid");

                    b.ToTable("ProductDescription","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductInmem", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .HasMaxLength(2);

                    b.Property<string>("Color")
                        .HasMaxLength(15);

                    b.Property<int>("DaysToManufacture");

                    b.Property<DateTime?>("DiscontinuedDate");

                    b.Property<bool?>("FinishedGoodsFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<bool?>("MakeFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProductLine")
                        .HasMaxLength(2);

                    b.Property<int?>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int?>("ProductSubcategoryId")
                        .HasColumnName("ProductSubcategoryID");

                    b.Property<short>("ReorderPoint");

                    b.Property<short>("SafetyStockLevel");

                    b.Property<DateTime?>("SellEndDate");

                    b.Property<DateTime>("SellStartDate");

                    b.Property<string>("Size")
                        .HasMaxLength(5);

                    b.Property<string>("SizeUnitMeasureCode")
                        .HasMaxLength(3);

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.Property<string>("Style")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("WeightUnitMeasureCode")
                        .HasMaxLength(3);

                    b.HasKey("ProductId")
                        .HasName("IMPK_Product_ProductID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Name")
                        .HasName("IX_Name")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProductNumber")
                        .HasName("IX_ProductNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Product_inmem","Production");

                    b.HasAnnotation("SqlServer:MemoryOptimized", true);
                });

            modelBuilder.Entity("WebApplication5.Models.ProductInventory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<short>("LocationId")
                        .HasColumnName("LocationID");

                    b.Property<byte>("Bin");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Quantity");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("ProductId", "LocationId")
                        .HasName("PK_ProductInventory_ProductID_LocationID");

                    b.HasIndex("LocationId");

                    b.ToTable("ProductInventory","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductListPriceHistory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductId", "StartDate")
                        .HasName("PK_ProductListPriceHistory_ProductID_StartDate");

                    b.ToTable("ProductListPriceHistory","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductModel", b =>
                {
                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductModelID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("xml");

                    b.Property<string>("Instructions")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelId");

                    b.HasIndex("CatalogDescription")
                        .HasName("PXML_ProductModel_CatalogDescription");

                    b.HasIndex("Instructions")
                        .HasName("PXML_ProductModel_Instructions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductModel_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductModel_rowguid");

                    b.ToTable("ProductModel","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductModelIllustration", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<int>("IllustrationId")
                        .HasColumnName("IllustrationID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductModelId", "IllustrationId")
                        .HasName("PK_ProductModelIllustration_ProductModelID_IllustrationID");

                    b.HasIndex("IllustrationId");

                    b.ToTable("ProductModelIllustration","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductModelProductDescriptionCulture", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<int>("ProductDescriptionId")
                        .HasColumnName("ProductDescriptionID");

                    b.Property<string>("CultureId")
                        .HasColumnName("CultureID")
                        .HasMaxLength(6);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductModelId", "ProductDescriptionId", "CultureId")
                        .HasName("PK_ProductModelProductDescriptionCulture_ProductModelID_ProductDescriptionID_CultureID");

                    b.HasIndex("CultureId");

                    b.HasIndex("ProductDescriptionId");

                    b.ToTable("ProductModelProductDescriptionCulture","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductOndisk", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .HasMaxLength(2);

                    b.Property<string>("Color")
                        .HasMaxLength(15);

                    b.Property<int>("DaysToManufacture");

                    b.Property<DateTime?>("DiscontinuedDate");

                    b.Property<bool?>("FinishedGoodsFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<bool?>("MakeFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProductLine")
                        .HasMaxLength(2);

                    b.Property<int?>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int?>("ProductSubcategoryId")
                        .HasColumnName("ProductSubcategoryID");

                    b.Property<short>("ReorderPoint");

                    b.Property<short>("SafetyStockLevel");

                    b.Property<DateTime?>("SellEndDate");

                    b.Property<DateTime>("SellStartDate");

                    b.Property<string>("Size")
                        .HasMaxLength(5);

                    b.Property<string>("SizeUnitMeasureCode")
                        .HasMaxLength(3);

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.Property<string>("Style")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("WeightUnitMeasureCode")
                        .HasMaxLength(3);

                    b.HasKey("ProductId")
                        .HasName("ODPK_Product_ProductID");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.HasIndex("ProductNumber")
                        .HasName("IX_ProductNumber");

                    b.ToTable("Product_ondisk","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductPhoto", b =>
                {
                    b.Property<int>("ProductPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductPhotoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("LargePhoto");

                    b.Property<string>("LargePhotoFileName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("ThumbNailPhoto");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasMaxLength(50);

                    b.HasKey("ProductPhotoId");

                    b.ToTable("ProductPhoto","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductProductPhoto", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("ProductPhotoId")
                        .HasColumnName("ProductPhotoID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Primary");

                    b.HasKey("ProductId", "ProductPhotoId")
                        .HasName("PK_ProductProductPhoto_ProductID_ProductPhotoID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProductPhotoId");

                    b.ToTable("ProductProductPhoto","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductReview", b =>
                {
                    b.Property<int>("ProductReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductReviewID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(3850);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Rating");

                    b.Property<DateTime>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ProductReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Comments", "ProductId", "ReviewerName")
                        .HasName("IX_ProductReview_ProductID_Name");

                    b.ToTable("ProductReview","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductSubcategory", b =>
                {
                    b.Property<int>("ProductSubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductSubcategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ProductCategoryId")
                        .HasColumnName("ProductCategoryID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductSubcategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductSubcategory_Name");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductSubcategory_rowguid");

                    b.ToTable("ProductSubcategory","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductVendor", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("AverageLeadTime");

                    b.Property<decimal?>("LastReceiptCost")
                        .HasColumnType("money");

                    b.Property<DateTime?>("LastReceiptDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxOrderQty");

                    b.Property<int>("MinOrderQty");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OnOrderQty");

                    b.Property<decimal>("StandardPrice")
                        .HasColumnType("money");

                    b.Property<string>("UnitMeasureCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.HasKey("ProductId", "BusinessEntityId")
                        .HasName("PK_ProductVendor_ProductID_BusinessEntityID");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("UnitMeasureCode");

                    b.ToTable("ProductVendor","Purchasing");
                });

            modelBuilder.Entity("WebApplication5.Models.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .HasColumnName("PurchaseOrderID");

                    b.Property<int>("PurchaseOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PurchaseOrderDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull([OrderQty]*[UnitPrice],(0.00)))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("OrderQty");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<decimal>("ReceivedQty")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal>("RejectedQty")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal>("StockedQty")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(9, 2)")
                        .HasComputedColumnSql("(isnull([ReceivedQty]-[RejectedQty],(0.00)))");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("PurchaseOrderId", "PurchaseOrderDetailId")
                        .HasName("PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaseOrderDetail","Purchasing");
                });

            modelBuilder.Entity("WebApplication5.Models.PurchaseOrderHeader", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PurchaseOrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EmployeeID");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("RevisionNumber");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShipMethodId")
                        .HasColumnName("ShipMethodID");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))");

                    b.Property<int>("VendorId")
                        .HasColumnName("VendorID");

                    b.HasKey("PurchaseOrderId")
                        .HasName("PK_PurchaseOrderHeader_PurchaseOrderID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShipMethodId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrderHeader","Purchasing");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnName("SalesOrderID");

                    b.Property<int>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarrierTrackingNumber")
                        .HasMaxLength(25);

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric(38, 6)")
                        .HasComputedColumnSql("(isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0)))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("OrderQty");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("SpecialOfferId")
                        .HasColumnName("SpecialOfferID");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("money");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId")
                        .HasName("PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID");

                    b.HasIndex("ProductId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesOrderDetail_rowguid");

                    b.HasIndex("SpecialOfferId", "ProductId");

                    b.ToTable("SalesOrderDetail","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderDetailInmem", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnName("SalesOrderID");

                    b.Property<long>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarrierTrackingNumber")
                        .HasMaxLength(25);

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<short>("OrderQty");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("SpecialOfferId")
                        .HasColumnName("SpecialOfferID");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("money");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId")
                        .HasName("imPK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProductId")
                        .HasName("IX_ProductID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SalesOrderId")
                        .HasName("IX_SalesOrderID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SpecialOfferId", "ProductId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("SalesOrderDetail_inmem","Sales");

                    b.HasAnnotation("SqlServer:MemoryOptimized", true);
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderDetailOndisk", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnName("SalesOrderID");

                    b.Property<long>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarrierTrackingNumber")
                        .HasMaxLength(25);

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<short>("OrderQty");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("SpecialOfferId")
                        .HasColumnName("SpecialOfferID");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("money");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId")
                        .HasName("ODPK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID");

                    b.HasIndex("ProductId")
                        .HasName("IX_ProductID");

                    b.HasIndex("SpecialOfferId", "ProductId");

                    b.ToTable("SalesOrderDetail_ondisk","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(15);

                    b.Property<int>("BillToAddressId")
                        .HasColumnName("BillToAddressID");

                    b.Property<string>("Comment")
                        .HasMaxLength(128);

                    b.Property<string>("CreditCardApprovalCode")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("CreditCardId")
                        .HasColumnName("CreditCardID");

                    b.Property<int?>("CurrencyRateId")
                        .HasColumnName("CurrencyRateID");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("OnlineOrderFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(25);

                    b.Property<byte>("RevisionNumber");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID]),N'*** ERROR ***'))")
                        .HasMaxLength(25);

                    b.Property<int?>("SalesPersonId")
                        .HasColumnName("SalesPersonID");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShipMethodId")
                        .HasColumnName("ShipMethodID");

                    b.Property<int>("ShipToAddressId")
                        .HasColumnName("ShipToAddressID");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<int?>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))");

                    b.HasKey("SalesOrderId")
                        .HasName("PK_SalesOrderHeader_SalesOrderID");

                    b.HasIndex("BillToAddressId");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("CurrencyRateId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_rowguid");

                    b.HasIndex("SalesOrderNumber")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_SalesOrderNumber");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("ShipMethodId");

                    b.HasIndex("ShipToAddressId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesOrderHeader","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderHeaderInmem", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(15);

                    b.Property<int>("BillToAddressId")
                        .HasColumnName("BillToAddressID");

                    b.Property<string>("Comment")
                        .HasMaxLength(128);

                    b.Property<string>("CreditCardApprovalCode")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("CreditCardId")
                        .HasColumnName("CreditCardID");

                    b.Property<int?>("CurrencyRateId")
                        .HasColumnName("CurrencyRateID");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DueDate");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<bool?>("OnlineOrderFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(25);

                    b.Property<byte>("RevisionNumber");

                    b.Property<int>("SalesPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesPersonID")
                        .HasDefaultValueSql("((-1))");

                    b.Property<DateTime?>("ShipDate");

                    b.Property<int>("ShipMethodId")
                        .HasColumnName("ShipMethodID");

                    b.Property<int>("ShipToAddressId")
                        .HasColumnName("ShipToAddressID");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<int?>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.HasKey("SalesOrderId")
                        .HasName("PK__SalesOrd__B14003C3270C320B")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CustomerId")
                        .HasName("IX_CustomerID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SalesPersonId")
                        .HasName("IX_SalesPersonID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("SalesOrderHeader_inmem","Sales");

                    b.HasAnnotation("SqlServer:MemoryOptimized", true);
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderHeaderOndisk", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(15);

                    b.Property<int>("BillToAddressId")
                        .HasColumnName("BillToAddressID");

                    b.Property<string>("Comment")
                        .HasMaxLength(128);

                    b.Property<string>("CreditCardApprovalCode")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("CreditCardId")
                        .HasColumnName("CreditCardID");

                    b.Property<int?>("CurrencyRateId")
                        .HasColumnName("CurrencyRateID");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DueDate");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<bool?>("OnlineOrderFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(25);

                    b.Property<byte>("RevisionNumber");

                    b.Property<int>("SalesPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesPersonID")
                        .HasDefaultValueSql("((-1))");

                    b.Property<DateTime?>("ShipDate");

                    b.Property<int>("ShipMethodId")
                        .HasColumnName("ShipMethodID");

                    b.Property<int>("ShipToAddressId")
                        .HasColumnName("ShipToAddressID");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<int?>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.HasKey("SalesOrderId")
                        .HasName("PK__SalesOrd__B14003C2B181FB70");

                    b.HasIndex("CustomerId")
                        .HasName("IX_CustomerID");

                    b.HasIndex("SalesPersonId")
                        .HasName("IX_SalesPersonID");

                    b.ToTable("SalesOrderHeader_ondisk","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderHeaderSalesReason", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnName("SalesOrderID");

                    b.Property<int>("SalesReasonId")
                        .HasColumnName("SalesReasonID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("SalesOrderId", "SalesReasonId")
                        .HasName("PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID");

                    b.HasIndex("SalesReasonId");

                    b.ToTable("SalesOrderHeaderSalesReason","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderJson", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnName("SalesOrderID");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(15);

                    b.Property<int?>("BillToAddressId")
                        .HasColumnName("BillToAddressID");

                    b.Property<string>("Comment")
                        .HasMaxLength(128);

                    b.Property<string>("CreditCardApprovalCode")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("CreditCardId")
                        .HasColumnName("CreditCardID");

                    b.Property<int?>("CurrencyRateId")
                        .HasColumnName("CurrencyRateID");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<string>("Info");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("OnlineOrderFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OrderItems");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(25);

                    b.Property<byte>("RevisionNumber");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID]),N'*** ERROR ***'))")
                        .HasMaxLength(25);

                    b.Property<int?>("SalesPersonId")
                        .HasColumnName("SalesPersonID");

                    b.Property<string>("SalesReasons");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ShipMethodId")
                        .HasColumnName("ShipMethodID");

                    b.Property<int?>("ShipToAddressId")
                        .HasColumnName("ShipToAddressID");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<int?>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))");

                    b.HasKey("SalesOrderId")
                        .HasName("PK_SalesOrder__json_SalesOrderID");

                    b.ToTable("SalesOrder_json","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesPerson", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<decimal>("Bonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("CommissionPct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("SalesLastYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal?>("SalesQuota")
                        .HasColumnType("money");

                    b.Property<decimal>("SalesYtd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesYTD")
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<int?>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.HasKey("BusinessEntityId")
                        .HasName("PK_SalesPerson_BusinessEntityID");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesPerson_rowguid");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesPerson","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesPersonQuotaHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("QuotaDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("SalesQuota")
                        .HasColumnType("money");

                    b.HasKey("BusinessEntityId", "QuotaDate")
                        .HasName("PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesPersonQuotaHistory_rowguid");

                    b.ToTable("SalesPersonQuotaHistory","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesReason", b =>
                {
                    b.Property<int>("SalesReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesReasonID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ReasonType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SalesReasonId");

                    b.ToTable("SalesReason","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesTaxRate", b =>
                {
                    b.Property<int>("SalesTaxRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesTaxRateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("StateProvinceId")
                        .HasColumnName("StateProvinceID");

                    b.Property<decimal>("TaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<byte>("TaxType");

                    b.HasKey("SalesTaxRateId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesTaxRate_rowguid");

                    b.HasIndex("StateProvinceId", "TaxType")
                        .IsUnique()
                        .HasName("AK_SalesTaxRate_StateProvinceID_TaxType");

                    b.ToTable("SalesTaxRate","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesTerritory", b =>
                {
                    b.Property<int>("TerritoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TerritoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CostLastYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("CostYtd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CostYTD")
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("SalesLastYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("SalesYtd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesYTD")
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.HasKey("TerritoryId")
                        .HasName("PK_SalesTerritory_TerritoryID");

                    b.HasIndex("CountryRegionCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_SalesTerritory_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesTerritory_rowguid");

                    b.ToTable("SalesTerritory","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesTerritoryHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId", "StartDate", "TerritoryId")
                        .HasName("PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesTerritoryHistory_rowguid");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesTerritoryHistory","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.ScrapReason", b =>
                {
                    b.Property<short>("ScrapReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ScrapReasonID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ScrapReasonId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ScrapReason_Name");

                    b.ToTable("ScrapReason","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.Shift", b =>
                {
                    b.Property<byte>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShiftID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("EndTime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<TimeSpan>("StartTime");

                    b.HasKey("ShiftId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Shift_Name");

                    b.HasIndex("StartTime", "EndTime")
                        .IsUnique()
                        .HasName("AK_Shift_StartTime_EndTime");

                    b.ToTable("Shift","HumanResources");
                });

            modelBuilder.Entity("WebApplication5.Models.ShipMethod", b =>
                {
                    b.Property<int>("ShipMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShipMethodID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("ShipBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("ShipRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.HasKey("ShipMethodId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ShipMethod_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ShipMethod_rowguid");

                    b.ToTable("ShipMethod","Purchasing");
                });

            modelBuilder.Entity("WebApplication5.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShoppingCartItemID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnName("ShoppingCartID")
                        .HasMaxLength(50);

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId", "ProductId");

                    b.ToTable("ShoppingCartItem","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SpecialOffer", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SpecialOfferID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<decimal>("DiscountPct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaxQty");

                    b.Property<int>("MinQty");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SpecialOfferId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SpecialOffer_rowguid");

                    b.ToTable("SpecialOffer","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SpecialOfferInmem", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SpecialOfferID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<decimal>("DiscountPct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("MaxQty");

                    b.Property<int>("MinQty");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SpecialOfferId")
                        .HasName("IMPK_SpecialOffer_SpecialOfferID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("SpecialOffer_inmem","Sales");

                    b.HasAnnotation("SqlServer:MemoryOptimized", true);
                });

            modelBuilder.Entity("WebApplication5.Models.SpecialOfferOndisk", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SpecialOfferID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<decimal>("DiscountPct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("MaxQty");

                    b.Property<int>("MinQty");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SpecialOfferId")
                        .HasName("ODPK_SpecialOffer_SpecialOfferID");

                    b.ToTable("SpecialOffer_ondisk","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SpecialOfferProduct", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .HasColumnName("SpecialOfferID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("SpecialOfferId", "ProductId")
                        .HasName("PK_SpecialOfferProduct_SpecialOfferID_ProductID");

                    b.HasIndex("ProductId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SpecialOfferProduct_rowguid");

                    b.ToTable("SpecialOfferProduct","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.SpecialOfferProductInmem", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .HasColumnName("SpecialOfferID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("SpecialOfferId", "ProductId")
                        .HasName("IMPK_SpecialOfferProduct_SpecialOfferID_ProductID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProductId")
                        .HasName("ix_ProductID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("SpecialOfferProduct_inmem","Sales");

                    b.HasAnnotation("SqlServer:MemoryOptimized", true);
                });

            modelBuilder.Entity("WebApplication5.Models.SpecialOfferProductOndisk", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .HasColumnName("SpecialOfferID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("SpecialOfferId", "ProductId")
                        .HasName("ODPK_SpecialOfferProduct_SpecialOfferID_ProductID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProductId")
                        .HasName("ix_ProductID");

                    b.ToTable("SpecialOfferProduct_ondisk","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.StateProvince", b =>
                {
                    b.Property<int>("StateProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StateProvinceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<bool?>("IsOnlyStateProvinceFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("StateProvinceCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<int>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.HasKey("StateProvinceId");

                    b.HasIndex("CountryRegionCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_StateProvince_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_StateProvince_rowguid");

                    b.HasIndex("TerritoryId");

                    b.HasIndex("StateProvinceCode", "CountryRegionCode")
                        .IsUnique()
                        .HasName("AK_StateProvince_StateProvinceCode_CountryRegionCode");

                    b.ToTable("StateProvince","Person");
                });

            modelBuilder.Entity("WebApplication5.Models.Store", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<string>("Demographics")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnName("SalesPersonID");

                    b.HasKey("BusinessEntityId")
                        .HasName("PK_Store_BusinessEntityID");

                    b.HasIndex("Demographics")
                        .HasName("PXML_Store_Demographics");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Store_rowguid");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Store","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.TrackingEvent", b =>
                {
                    b.Property<int>("TrackingEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TrackingEventID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("TrackingEventId");

                    b.ToTable("TrackingEvent","Sales");
                });

            modelBuilder.Entity("WebApplication5.Models.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransactionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<int>("ReferenceOrderId")
                        .HasColumnName("ReferenceOrderID");

                    b.Property<int>("ReferenceOrderLineId")
                        .HasColumnName("ReferenceOrderLineID");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("TransactionId")
                        .HasName("PK_TransactionHistory_TransactionID");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReferenceOrderId", "ReferenceOrderLineId");

                    b.ToTable("TransactionHistory","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.TransactionHistoryArchive", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnName("TransactionID");

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<int>("ReferenceOrderId")
                        .HasColumnName("ReferenceOrderID");

                    b.Property<int>("ReferenceOrderLineId")
                        .HasColumnName("ReferenceOrderLineID");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("TransactionId")
                        .HasName("PK_TransactionHistoryArchive_TransactionID");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReferenceOrderId", "ReferenceOrderLineId");

                    b.ToTable("TransactionHistoryArchive","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.UnitMeasure", b =>
                {
                    b.Property<string>("UnitMeasureCode")
                        .HasMaxLength(3);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("UnitMeasureCode")
                        .HasName("PK_UnitMeasure_UnitMeasureCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_UnitMeasure_Name");

                    b.ToTable("UnitMeasure","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.Vendor", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<bool?>("ActiveFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<byte>("CreditRating");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("PreferredVendorStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("PurchasingWebServiceUrl")
                        .HasColumnName("PurchasingWebServiceURL")
                        .HasMaxLength(1024);

                    b.HasKey("BusinessEntityId")
                        .HasName("PK_Vendor_BusinessEntityID");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasName("AK_Vendor_AccountNumber");

                    b.ToTable("Vendor","Purchasing");
                });

            modelBuilder.Entity("WebApplication5.Models.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkOrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderQty");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<short?>("ScrapReasonId")
                        .HasColumnName("ScrapReasonID");

                    b.Property<short>("ScrappedQty");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StockedQty")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull([OrderQty]-[ScrappedQty],(0)))");

                    b.HasKey("WorkOrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ScrapReasonId");

                    b.ToTable("WorkOrder","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.WorkOrderRouting", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .HasColumnName("WorkOrderID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<short>("OperationSequence");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ActualResourceHrs")
                        .HasColumnType("decimal(9, 4)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime");

                    b.Property<short>("LocationId")
                        .HasColumnName("LocationID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PlannedCost")
                        .HasColumnType("money");

                    b.Property<DateTime>("ScheduledEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ScheduledStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("WorkOrderId", "ProductId", "OperationSequence")
                        .HasName("PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.ToTable("WorkOrderRouting","Production");
                });

            modelBuilder.Entity("WebApplication5.Models.Address", b =>
                {
                    b.HasOne("WebApplication5.Models.StateProvince", "StateProvince")
                        .WithMany("Address")
                        .HasForeignKey("StateProvinceId");
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("WebApplication5.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("WebApplication5.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("WebApplication5.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("WebApplication5.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication5.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication5.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("WebApplication5.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication5.Models.BillOfMaterials", b =>
                {
                    b.HasOne("WebApplication5.Models.Product", "Component")
                        .WithMany("BillOfMaterialsComponent")
                        .HasForeignKey("ComponentId");

                    b.HasOne("WebApplication5.Models.Product", "ProductAssembly")
                        .WithMany("BillOfMaterialsProductAssembly")
                        .HasForeignKey("ProductAssemblyId");

                    b.HasOne("WebApplication5.Models.UnitMeasure", "UnitMeasureCodeNavigation")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("UnitMeasureCode");
                });

            modelBuilder.Entity("WebApplication5.Models.BusinessEntityAddress", b =>
                {
                    b.HasOne("WebApplication5.Models.Address", "Address")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("AddressId");

                    b.HasOne("WebApplication5.Models.AddressType", "AddressType")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("AddressTypeId");

                    b.HasOne("WebApplication5.Models.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("WebApplication5.Models.BusinessEntityContact", b =>
                {
                    b.HasOne("WebApplication5.Models.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("WebApplication5.Models.ContactType", "ContactType")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("WebApplication5.Models.Person", "Person")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("WebApplication5.Models.CountryRegionCurrency", b =>
                {
                    b.HasOne("WebApplication5.Models.CountryRegion", "CountryRegionCodeNavigation")
                        .WithMany("CountryRegionCurrency")
                        .HasForeignKey("CountryRegionCode");

                    b.HasOne("WebApplication5.Models.Currency", "CurrencyCodeNavigation")
                        .WithMany("CountryRegionCurrency")
                        .HasForeignKey("CurrencyCode");
                });

            modelBuilder.Entity("WebApplication5.Models.CurrencyRate", b =>
                {
                    b.HasOne("WebApplication5.Models.Currency", "FromCurrencyCodeNavigation")
                        .WithMany("CurrencyRateFromCurrencyCodeNavigation")
                        .HasForeignKey("FromCurrencyCode");

                    b.HasOne("WebApplication5.Models.Currency", "ToCurrencyCodeNavigation")
                        .WithMany("CurrencyRateToCurrencyCodeNavigation")
                        .HasForeignKey("ToCurrencyCode");
                });

            modelBuilder.Entity("WebApplication5.Models.Customer", b =>
                {
                    b.HasOne("WebApplication5.Models.Person", "Person")
                        .WithMany("Customer")
                        .HasForeignKey("PersonId");

                    b.HasOne("WebApplication5.Models.Store", "Store")
                        .WithMany("Customer")
                        .HasForeignKey("StoreId");

                    b.HasOne("WebApplication5.Models.SalesTerritory", "Territory")
                        .WithMany("Customer")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("WebApplication5.Models.EmailAddress", b =>
                {
                    b.HasOne("WebApplication5.Models.Person", "BusinessEntity")
                        .WithMany("EmailAddress")
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("WebApplication5.Models.Employee", b =>
                {
                    b.HasOne("WebApplication5.Models.Person", "BusinessEntity")
                        .WithOne("Employee")
                        .HasForeignKey("WebApplication5.Models.Employee", "BusinessEntityId");
                });

            modelBuilder.Entity("WebApplication5.Models.EmployeeDepartmentHistory", b =>
                {
                    b.HasOne("WebApplication5.Models.Employee", "BusinessEntity")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("WebApplication5.Models.Department", "Department")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("WebApplication5.Models.Shift", "Shift")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("ShiftId");
                });

            modelBuilder.Entity("WebApplication5.Models.EmployeePayHistory", b =>
                {
                    b.HasOne("WebApplication5.Models.Employee", "BusinessEntity")
                        .WithMany("EmployeePayHistory")
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("WebApplication5.Models.JobCandidate", b =>
                {
                    b.HasOne("WebApplication5.Models.Employee", "BusinessEntity")
                        .WithMany("JobCandidate")
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("WebApplication5.Models.Password", b =>
                {
                    b.HasOne("WebApplication5.Models.Person", "BusinessEntity")
                        .WithOne("Password")
                        .HasForeignKey("WebApplication5.Models.Password", "BusinessEntityId");
                });

            modelBuilder.Entity("WebApplication5.Models.Person", b =>
                {
                    b.HasOne("WebApplication5.Models.BusinessEntity", "BusinessEntity")
                        .WithOne("Person")
                        .HasForeignKey("WebApplication5.Models.Person", "BusinessEntityId");
                });

            modelBuilder.Entity("WebApplication5.Models.PersonCreditCard", b =>
                {
                    b.HasOne("WebApplication5.Models.Person", "BusinessEntity")
                        .WithMany("PersonCreditCard")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("WebApplication5.Models.CreditCard", "CreditCard")
                        .WithMany("PersonCreditCard")
                        .HasForeignKey("CreditCardId");
                });

            modelBuilder.Entity("WebApplication5.Models.PersonPhone", b =>
                {
                    b.HasOne("WebApplication5.Models.Person", "BusinessEntity")
                        .WithMany("PersonPhone")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("WebApplication5.Models.PhoneNumberType", "PhoneNumberType")
                        .WithMany("PersonPhone")
                        .HasForeignKey("PhoneNumberTypeId");
                });

            modelBuilder.Entity("WebApplication5.Models.Product", b =>
                {
                    b.HasOne("WebApplication5.Models.ProductModel", "ProductModel")
                        .WithMany("Product")
                        .HasForeignKey("ProductModelId");

                    b.HasOne("WebApplication5.Models.ProductSubcategory", "ProductSubcategory")
                        .WithMany("Product")
                        .HasForeignKey("ProductSubcategoryId");

                    b.HasOne("WebApplication5.Models.UnitMeasure", "SizeUnitMeasureCodeNavigation")
                        .WithMany("ProductSizeUnitMeasureCodeNavigation")
                        .HasForeignKey("SizeUnitMeasureCode");

                    b.HasOne("WebApplication5.Models.UnitMeasure", "WeightUnitMeasureCodeNavigation")
                        .WithMany("ProductWeightUnitMeasureCodeNavigation")
                        .HasForeignKey("WeightUnitMeasureCode");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductCostHistory", b =>
                {
                    b.HasOne("WebApplication5.Models.Product", "Product")
                        .WithMany("ProductCostHistory")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductInventory", b =>
                {
                    b.HasOne("WebApplication5.Models.Location", "Location")
                        .WithMany("ProductInventory")
                        .HasForeignKey("LocationId");

                    b.HasOne("WebApplication5.Models.Product", "Product")
                        .WithMany("ProductInventory")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductListPriceHistory", b =>
                {
                    b.HasOne("WebApplication5.Models.Product", "Product")
                        .WithMany("ProductListPriceHistory")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductModelIllustration", b =>
                {
                    b.HasOne("WebApplication5.Models.Illustration", "Illustration")
                        .WithMany("ProductModelIllustration")
                        .HasForeignKey("IllustrationId");

                    b.HasOne("WebApplication5.Models.ProductModel", "ProductModel")
                        .WithMany("ProductModelIllustration")
                        .HasForeignKey("ProductModelId");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductModelProductDescriptionCulture", b =>
                {
                    b.HasOne("WebApplication5.Models.Culture", "Culture")
                        .WithMany("ProductModelProductDescriptionCulture")
                        .HasForeignKey("CultureId");

                    b.HasOne("WebApplication5.Models.ProductDescription", "ProductDescription")
                        .WithMany("ProductModelProductDescriptionCulture")
                        .HasForeignKey("ProductDescriptionId");

                    b.HasOne("WebApplication5.Models.ProductModel", "ProductModel")
                        .WithMany("ProductModelProductDescriptionCulture")
                        .HasForeignKey("ProductModelId");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductProductPhoto", b =>
                {
                    b.HasOne("WebApplication5.Models.Product", "Product")
                        .WithMany("ProductProductPhoto")
                        .HasForeignKey("ProductId");

                    b.HasOne("WebApplication5.Models.ProductPhoto", "ProductPhoto")
                        .WithMany("ProductProductPhoto")
                        .HasForeignKey("ProductPhotoId");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductReview", b =>
                {
                    b.HasOne("WebApplication5.Models.Product", "Product")
                        .WithMany("ProductReview")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductSubcategory", b =>
                {
                    b.HasOne("WebApplication5.Models.ProductCategory", "ProductCategory")
                        .WithMany("ProductSubcategory")
                        .HasForeignKey("ProductCategoryId");
                });

            modelBuilder.Entity("WebApplication5.Models.ProductVendor", b =>
                {
                    b.HasOne("WebApplication5.Models.Vendor", "BusinessEntity")
                        .WithMany("ProductVendor")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("WebApplication5.Models.Product", "Product")
                        .WithMany("ProductVendor")
                        .HasForeignKey("ProductId");

                    b.HasOne("WebApplication5.Models.UnitMeasure", "UnitMeasureCodeNavigation")
                        .WithMany("ProductVendor")
                        .HasForeignKey("UnitMeasureCode");
                });

            modelBuilder.Entity("WebApplication5.Models.PurchaseOrderDetail", b =>
                {
                    b.HasOne("WebApplication5.Models.Product", "Product")
                        .WithMany("PurchaseOrderDetail")
                        .HasForeignKey("ProductId");

                    b.HasOne("WebApplication5.Models.PurchaseOrderHeader", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetail")
                        .HasForeignKey("PurchaseOrderId");
                });

            modelBuilder.Entity("WebApplication5.Models.PurchaseOrderHeader", b =>
                {
                    b.HasOne("WebApplication5.Models.Employee", "Employee")
                        .WithMany("PurchaseOrderHeader")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("WebApplication5.Models.ShipMethod", "ShipMethod")
                        .WithMany("PurchaseOrderHeader")
                        .HasForeignKey("ShipMethodId");

                    b.HasOne("WebApplication5.Models.Vendor", "Vendor")
                        .WithMany("PurchaseOrderHeader")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderDetail", b =>
                {
                    b.HasOne("WebApplication5.Models.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication5.Models.SpecialOfferProduct", "SpecialOfferProduct")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SpecialOfferId", "ProductId")
                        .HasConstraintName("FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderDetailInmem", b =>
                {
                    b.HasOne("WebApplication5.Models.SalesOrderHeaderInmem", "SalesOrder")
                        .WithMany("SalesOrderDetailInmem")
                        .HasForeignKey("SalesOrderId")
                        .HasConstraintName("IMFK_SalesOrderDetail_SalesOrderHeader_SalesOrderID");

                    b.HasOne("WebApplication5.Models.SpecialOfferProductInmem", "SpecialOfferProductInmem")
                        .WithMany("SalesOrderDetailInmem")
                        .HasForeignKey("SpecialOfferId", "ProductId")
                        .HasConstraintName("IMFK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderDetailOndisk", b =>
                {
                    b.HasOne("WebApplication5.Models.SalesOrderHeaderOndisk", "SalesOrder")
                        .WithMany("SalesOrderDetailOndisk")
                        .HasForeignKey("SalesOrderId")
                        .HasConstraintName("ODFK_SalesOrderDetail_SalesOrderHeader_SalesOrderID");

                    b.HasOne("WebApplication5.Models.SpecialOfferProductOndisk", "SpecialOfferProductOndisk")
                        .WithMany("SalesOrderDetailOndisk")
                        .HasForeignKey("SpecialOfferId", "ProductId")
                        .HasConstraintName("ODFK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderHeader", b =>
                {
                    b.HasOne("WebApplication5.Models.Address", "BillToAddress")
                        .WithMany("SalesOrderHeaderBillToAddress")
                        .HasForeignKey("BillToAddressId");

                    b.HasOne("WebApplication5.Models.CreditCard", "CreditCard")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CreditCardId");

                    b.HasOne("WebApplication5.Models.CurrencyRate", "CurrencyRate")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CurrencyRateId");

                    b.HasOne("WebApplication5.Models.Customer", "Customer")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CustomerId");

                    b.HasOne("WebApplication5.Models.SalesPerson", "SalesPerson")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("SalesPersonId");

                    b.HasOne("WebApplication5.Models.ShipMethod", "ShipMethod")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("ShipMethodId");

                    b.HasOne("WebApplication5.Models.Address", "ShipToAddress")
                        .WithMany("SalesOrderHeaderShipToAddress")
                        .HasForeignKey("ShipToAddressId");

                    b.HasOne("WebApplication5.Models.SalesTerritory", "Territory")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesOrderHeaderSalesReason", b =>
                {
                    b.HasOne("WebApplication5.Models.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderHeaderSalesReason")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication5.Models.SalesReason", "SalesReason")
                        .WithMany("SalesOrderHeaderSalesReason")
                        .HasForeignKey("SalesReasonId");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesPerson", b =>
                {
                    b.HasOne("WebApplication5.Models.Employee", "BusinessEntity")
                        .WithOne("SalesPerson")
                        .HasForeignKey("WebApplication5.Models.SalesPerson", "BusinessEntityId");

                    b.HasOne("WebApplication5.Models.SalesTerritory", "Territory")
                        .WithMany("SalesPerson")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesPersonQuotaHistory", b =>
                {
                    b.HasOne("WebApplication5.Models.SalesPerson", "BusinessEntity")
                        .WithMany("SalesPersonQuotaHistory")
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesTaxRate", b =>
                {
                    b.HasOne("WebApplication5.Models.StateProvince", "StateProvince")
                        .WithMany("SalesTaxRate")
                        .HasForeignKey("StateProvinceId");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesTerritory", b =>
                {
                    b.HasOne("WebApplication5.Models.CountryRegion", "CountryRegionCodeNavigation")
                        .WithMany("SalesTerritory")
                        .HasForeignKey("CountryRegionCode");
                });

            modelBuilder.Entity("WebApplication5.Models.SalesTerritoryHistory", b =>
                {
                    b.HasOne("WebApplication5.Models.SalesPerson", "BusinessEntity")
                        .WithMany("SalesTerritoryHistory")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("WebApplication5.Models.SalesTerritory", "Territory")
                        .WithMany("SalesTerritoryHistory")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("WebApplication5.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("WebApplication5.Models.Product", "Product")
                        .WithMany("ShoppingCartItem")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("WebApplication5.Models.SpecialOfferProduct", b =>
                {
                    b.HasOne("WebApplication5.Models.Product", "Product")
                        .WithMany("SpecialOfferProduct")
                        .HasForeignKey("ProductId");

                    b.HasOne("WebApplication5.Models.SpecialOffer", "SpecialOffer")
                        .WithMany("SpecialOfferProduct")
                        .HasForeignKey("SpecialOfferId");
                });

            modelBuilder.Entity("WebApplication5.Models.SpecialOfferProductInmem", b =>
                {
                    b.HasOne("WebApplication5.Models.ProductInmem", "Product")
                        .WithMany("SpecialOfferProductInmem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("IMFK_SpecialOfferProduct_Product_ProductID");

                    b.HasOne("WebApplication5.Models.SpecialOfferInmem", "SpecialOffer")
                        .WithMany("SpecialOfferProductInmem")
                        .HasForeignKey("SpecialOfferId")
                        .HasConstraintName("IMFK_SpecialOfferProduct_SpecialOffer_SpecialOfferID");
                });

            modelBuilder.Entity("WebApplication5.Models.SpecialOfferProductOndisk", b =>
                {
                    b.HasOne("WebApplication5.Models.ProductOndisk", "Product")
                        .WithMany("SpecialOfferProductOndisk")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("ODFK_SpecialOfferProduct_Product_ProductID");

                    b.HasOne("WebApplication5.Models.SpecialOfferOndisk", "SpecialOffer")
                        .WithMany("SpecialOfferProductOndisk")
                        .HasForeignKey("SpecialOfferId")
                        .HasConstraintName("ODFK_SpecialOfferProduct_SpecialOffer_SpecialOfferID");
                });

            modelBuilder.Entity("WebApplication5.Models.StateProvince", b =>
                {
                    b.HasOne("WebApplication5.Models.CountryRegion", "CountryRegionCodeNavigation")
                        .WithMany("StateProvince")
                        .HasForeignKey("CountryRegionCode");

                    b.HasOne("WebApplication5.Models.SalesTerritory", "Territory")
                        .WithMany("StateProvince")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("WebApplication5.Models.Store", b =>
                {
                    b.HasOne("WebApplication5.Models.BusinessEntity", "BusinessEntity")
                        .WithOne("Store")
                        .HasForeignKey("WebApplication5.Models.Store", "BusinessEntityId");

                    b.HasOne("WebApplication5.Models.SalesPerson", "SalesPerson")
                        .WithMany("Store")
                        .HasForeignKey("SalesPersonId");
                });

            modelBuilder.Entity("WebApplication5.Models.TransactionHistory", b =>
                {
                    b.HasOne("WebApplication5.Models.Product", "Product")
                        .WithMany("TransactionHistory")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("WebApplication5.Models.Vendor", b =>
                {
                    b.HasOne("WebApplication5.Models.BusinessEntity", "BusinessEntity")
                        .WithOne("Vendor")
                        .HasForeignKey("WebApplication5.Models.Vendor", "BusinessEntityId");
                });

            modelBuilder.Entity("WebApplication5.Models.WorkOrder", b =>
                {
                    b.HasOne("WebApplication5.Models.Product", "Product")
                        .WithMany("WorkOrder")
                        .HasForeignKey("ProductId");

                    b.HasOne("WebApplication5.Models.ScrapReason", "ScrapReason")
                        .WithMany("WorkOrder")
                        .HasForeignKey("ScrapReasonId");
                });

            modelBuilder.Entity("WebApplication5.Models.WorkOrderRouting", b =>
                {
                    b.HasOne("WebApplication5.Models.Location", "Location")
                        .WithMany("WorkOrderRouting")
                        .HasForeignKey("LocationId");

                    b.HasOne("WebApplication5.Models.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderRouting")
                        .HasForeignKey("WorkOrderId");
                });
#pragma warning restore 612, 618
        }
    }
}
